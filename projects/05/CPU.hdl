// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode instruction
    // 0b"i xx a cccccc ddd jjj"
    // if i===1 then C-type else A-type
    // A-type: xxv vvvv vvvv vvvv : v = 15-bit constant
    // C-type: i  x  x  a  | c1 c2 c3 c4 | c5 c6 d1 d2 | d3 j1 j2 j3
    // C-type: 15 14 13 12 | 11 10 9  8  | 7  6  5  4  | 3  2  1  0
    // C-type:
    //      acccccc = comp : defined in Figure 4.3
    //      ddd = dest     : defined in Figure 4.4
    //      jjj = jump     : defined in Figure 4.5

    // cInstruction = instruction[15]
    Not(in=instruction[15], out=aInstruction);

    // DRegister control signals
    And(a=instruction[15], b=instruction[4], out=loadDReg);
    DRegister(in=ALUout, load=loadDReg, out=DRegOut);

    // ARegister control signals
    // ALUtoA = cInstruction and dest to A-reg
    And(a=instruction[15], b=instruction[5], out=ALUtoA);
    // Mux connected to ARegister
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=ARegIn);

    // loadAReg = aInstruction or ALUtoA
    Or(a=aInstruction, b=ALUtoA, out=loadAReg);
    ARegister(in=ARegIn, load=loadAReg, out=ARegOut, out[0..14]=addressM);

    // A or M multiplexer
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ALUin);

    // ALU control signals
    ALU(x=DRegOut,
        y=ALUin,
        no=instruction[6],
        f=instruction[7],
        ny=instruction[8],
        zy=instruction[9],
        nx=instruction[10],
        zx=instruction[11],
        out=ALUout,
        out=outM,
        zr=ZRout,
        ng=NGout
    );

    // Output for writing to memory
    // NOTE: addressM is defined in ARegister definition and outM is in the ALU definition
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Fetch insturction
    And(a=ZRout, b=instruction[1], out=jeq); // jeq
    And(a=NGout, b=instruction[2], out=jlt); // jlt
    Or(a=ZRout, b=NGout, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);
    And(a=positive, b=instruction[0], out=jgt); // jgt
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jumpToA);
    And(a=instruction[15], b=jumpToA, out=PCload);
    Not(in=PCload, out=PCinc);
    PC(in=ARegOut, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}
